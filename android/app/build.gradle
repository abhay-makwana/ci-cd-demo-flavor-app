apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

project.ext.envConfigFiles = [
    debug: ".env",
    release: ".env",
    devdebug: ".env.dev",
    devrelease: ".env.dev",
    stagingdebug: ".env.dev",
    stagingrelease: ".env.dev",
    livedebug: ".env.live",
    liverelease: ".env.live",
]   // for CI/Cd

apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"     // for CI/Cd

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = io.github.react-native-community:jsc-android-intl:2026004.+`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    // for CI/Cd : flavor
    flavorDimensions "default"

    productFlavors {
        live {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId "com.cicddemo.live"
            targetSdkVersion rootProject.ext.targetSdkVersion
            resValue "string", "build_config_package", "com.cicddemo"
            versionCode 1
            versionName "1.0"
        }
        staging {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId "com.cicddemo.staging"
            targetSdkVersion rootProject.ext.targetSdkVersion
            resValue "string", "build_config_package", "com.cicddemo"
            versionCode 1
            versionName "1.0"
        }
        dev {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId "com.cicddemo.dev"
            targetSdkVersion rootProject.ext.targetSdkVersion
            resValue "string", "build_config_package", "com.cicddemo"
            versionCode 1
            versionName "1.0"
        }
    }

    def getGitCommitCount() {
        try {
            // Execute the git command to get the commit count
            // project.rootDir is important to ensure the command is run from the root of your Git repository
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'rev-list', '--count', 'HEAD'
                standardOutput = stdout
                workingDir project.rootDir // Ensure Git command runs from repo root
            }
            // def count = stdout.toString().trim()
            // if (count.isInteger()) {
            //     return count.toInteger()
            // } else {
            //     // Fallback for cases where git might not be available or command fails
            //     println "Warning: Could not get git commit count. Falling back to default versionCode."
            //     return 1 // Default or a safe starting number
            // }
            return Integer.parseInt(stdout.toString().trim())
        } catch (Throwable e) {
            // Handle cases where git is not installed or the command fails (e.g., local dev)
            println "Warning: Git command failed: ${e.message}. Falling back to default versionCode."
            return 1 // Default or a safe starting number
        }
    }
    
    namespace "com.cicddemo"
    defaultConfig {
        applicationId "com.cicddemo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        // versionCode 1
        
        // Use the function to get the commit count for versionCode
        versionCode getGitCommitCount()
        
        versionName "1.0.${getGitCommitCount()}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            // storeFile file(System.getenv("KEYSTORE_PATH"))
            // storePassword System.getenv("KEYSTORE_PASSWORD")
            // keyAlias System.getenv("KEY_ALIAS")
            // keyPassword System.getenv("KEY_PASSWORD")
            
            storeFile file(MYAPP_UPLOAD_STORE_FILE)
            storePassword MYAPP_UPLOAD_STORE_PASSWORD
            keyAlias MYAPP_UPLOAD_KEY_ALIAS
            keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            

        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}
